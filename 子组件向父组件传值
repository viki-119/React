<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Document</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/react.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/JSXTransformer.js"></script>
</head>
<body>
<div id="container"></div>

<script type="text/jsx">
    // 父组件
    var MyContainer = React.createClass({
        getInitialState: function () {
            return {
              checked: false
            };
        },
        onChildChanged: function (newState) {
            this.setState({
              checked: newState
            });
        },
        render: function() {
        var isChecked = this.state.checked ? 'yes' : 'no';
            return (
              <div>
                <div>Are you checked: {isChecked}</div>
                <ToggleButton text="Toggle me"
                  initialChecked={this.state.checked}
                  callbackParent={this.onChildChanged}
                  />
              </div>
            );
        }
    });

    // 子组件
    var ToggleButton = React.createClass({
        getInitialState: function () {
            return {
              checked: this.props.initialChecked
            };
        },
        onTextChange: function () {
            var newState = !this.state.checked;
            this.setState({
              checked: newState
            });
            // 这里要注意：setState 是一个异步方法，所以需要操作缓存的当前值
            this.props.callbackParent(newState);
        },
        render: function () {
            // 从【父组件】获取的值
            var text = this.props.text;
            return (
                <label>{text}: <input type="checkbox" checked={this.state.checked} onChange={this.onTextChange} /></label>
            );
        }
    });
    React.render(
        <div>
            <MyContainer/>
        </div>,
        document.getElementById('container'));
</script>
</body>
</html>
